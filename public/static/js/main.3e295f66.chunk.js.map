{"version":3,"sources":["services/mondayService.js","cmps/AddColumn.js","pages/Home.js","pages/App.js","serviceWorker.js","index.js"],"names":["domain","require","prefix","targetCol","a","console","log","window","location","origin","fetch","method","headers","body","JSON","stringify","res","json","data","boardId","prefixMap","query","getPrefixMap","updatePrefixMap","getPrefixMapByBoardId","AddColumn","setSelectedColumn","columns","createColumn","testCall","useState","preFix","setPreFix","selectedOption","setSelectedOption","options","map","column","value","id","label","title","className","placeholder","onChange","onInput","target","name","onClick","ev","preventDefault","monday","mondaySdk","Home","state","settings","background","attentionBoxTitle","attentionBoxType","nextNum","selectedColumn","getItemsIds","api","items","boards","item","srcColId","colId","create_column","getColPrefixs","colPrefixs","itemsIds","mondayService","forEach","itemId","idx","currPrefix","getPrefixCount","count","savePrefixMap","itemColVals","column_values","find","col","text","targetColId","setState","listen","boardIds","this","React","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e295f66.chunk.js","sourcesContent":["const BASE_URL = '/api/test'\nconst axios = require('axios')\n// const domain = 'https://684e708832c9.ngrok.io'\nconst domain = 'https://test-monday-pipl.herokuapp.com'\n// const domain = 'http://localhost:3030'\n// const domain = ''\n// saveToStorage(PREFIX_KEY, {})\n// function creatPrefixMap() {\n//     var prefixMap \n    \n// }\n\nasync function query(prefix, targetCol) {\n    console.log('query -> window.location.origin', window.location.origin)\n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    let res = await fetch(domain+'/api/monday/test', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'colData': { prefix, targetCol }\n        })\n    });\n    res = await res.json();\n    console.log('query -> res', res)\n\n    return res.data;\n\n\n}\nasync function getPrefixMap() {\n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    let res = await fetch(domain+'/api/monday/prefixMap', {\n        method: 'get',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        \n    });\n    res = await res.json();\n    console.log('getPrefixMap -> res', res)\n\n    return res;\n\n}\n\nasync function getPrefixMapByBoardId(boardId) {\n    \n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    // let res = await fetch(domain+'/api/monday/getPrefixMap/'+boardId, {\n    let res = await fetch(domain+'/api/monday/getPrefixMap/', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'boardId': boardId\n        })\n        \n    });\n    res = await res.json();\n    // console.log('getPrefixMap -> res', res)\n\n    return res;\n\n}\nasync function updatePrefixMap(prefixMap) {\n    \n    // try {\n    //     axios.post('http://localhost:8302', ())\n    // }\n\n    let res = await fetch(domain+'/api/monday/updatePrefixMap', {\n        method: 'post',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            'prefixMap': prefixMap\n        })\n        \n    });\n    res = await res.json();\n    // console.log('getPrefixMap -> res', res)\n\n    return res;\n\n}\n\n\n\n\n\n\n\n\nexport default {\n    query,\n    getPrefixMap,\n    updatePrefixMap,\n    getPrefixMapByBoardId\n}","import React, { useState } from 'react'\nimport Select from 'react-select';\n// import { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\n\nfunction AddColumn({setSelectedColumn, columns, createColumn, testCall }) {\n    console.log('AddColumn -> columns', columns)\n    const [preFix, setPreFix] = useState('')\n    const [selectedOption, setSelectedOption] = useState(null)\n\n    const handleInput = ({ target: { value } }) => {\n        if (!value) return\n        setPreFix(value)\n    }\n\n    const handleSelect = (selectedOption) => {\n        setSelectedOption(selectedOption)\n        // setSelectedColumn(selectedOption)\n    }\n\n    const onCreateColumn = (ev) => {\n        ev.preventDefault()\n        if (!selectedOption?.value) return\n        createColumn(selectedOption.value)\n    }\n\n    const options = columns.map(column => { return { value: column.id, label: column.title } })\n    console.log('AddColumn -> options', options)\n    return (\n        <form className=\"add-column\">\n            <Select\n                placeholder=\"Choose a source column\"\n                value={selectedOption}\n                options={options}\n                onChange={handleSelect}\n            />\n\n            <input placeholder=\"Choose target column prefix\" onInput={handleInput} name=\"prefix\" value={preFix} />\n            <button onClick={onCreateColumn}>Add Column</button>\n            <button onClick={(ev)=>testCall(ev, preFix, selectedOption)} >Test</button>\n\n        </form>\n    )\n}\n\nexport default AddColumn\n","import React from \"react\";\nimport \"../App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\"\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\"\nimport mondayService from \"../services/mondayService\";\nimport AddColumn from \"../cmps/AddColumn\";\nconst monday = mondaySdk();\nconst KEY = 'BOARD_KEY'\nclass Home extends React.Component {\n\n  // Default state\n  state = {\n    settings: {\n      background: \"#e2445c\",\n      attentionBoxTitle: \"Hey\",\n      attentionBoxType: \"danger\"\n    },\n    name: \"\",\n    nextNum: null,\n    columns: null,\n    selectedColumn: null,\n    prefixMap: null\n    // boardId: null\n  };\n\n\n  async componentDidMount() {\n    var query;\n    // TODO: set up event listeners\n    // const prefixMap = await mondayService.getPrefixMap()\n    // this.setState({ prefixMap })\n    await monday.listen(\"context\", async (res) => {\n\n      const boardId = res.data.boardIds[0]\n      // const { id: boardId } = res.data.boards[0]\n      this.setState({ ...this.state, boardId })\n\n\n      query = `query {boards (ids:${this.state.boardId}){\n        columns {\n          id\n          title\n          type\n        }\n      }}`\n      res = await monday.api(query)\n      const { columns } = res.data.boards[0]\n      console.log('awaitmonday.listen -> columns', columns)\n      this.setState({ columns })\n    })\n\n\n    // monday.listen(\"events\", (res) => {\n    //   const { selectedColumn } = this.state\n    //   // if (!selectedColumn) return\n    //   console.log('events', res.data, 'events');\n    //   const { type, columnId } = res.data\n    //   mondayService.query(columnId, 'HEYY')\n\n    //   if (type === 'change_column_values' && selectedColumn.id === columnId) {\n    //     console.log('changed right column');\n\n    //   }\n\n    //   // [12345, 12346, 12347]\n    // });\n    // query = `query {boards (ids:${this.state.boardId}){\n    //   columns {\n    //     id\n    //   }\n    // }}`\n    // res = await monday.api(query)\n\n\n\n\n  }\n\n  getItemsIds = async (boardId) => {\n    const query = `\n    query \n      { boards (ids:${boardId}) \n        { items {\n           id\n      \n          }\n        }\n      }`\n    const { data } = await monday.api(query)\n    const { items } = data.boards[0]\n    return items.map(item => item.id)\n\n  }\n\n  createColumn = async (srcColId) => {\n\n\n    const { boardId } = this.state\n    var query = `mutation {\n      create_column(board_id: ${boardId}, title: \"PERSITENT ID\", column_type: text) {\n        id\n      }\n    }`\n    let res = await monday.api(query)\n    const { create_column: { id: colId } } = res.data\n    const colPrefixs = await this.getColPrefixs(srcColId, boardId)\n    console.log('createColumn= -> colPrefixs', colPrefixs)\n    const itemsIds = await this.getItemsIds(boardId)\n\n\n    // console.log('newTryRes:', newTryRes.data)\n\n    // const prefixMap = await mondayService.getPrefixMap()\n    let prefixMap = await mondayService.getPrefixMapByBoardId(boardId)\n    prefixMap = prefixMap || {map:{}, boardId}\n    itemsIds.forEach(async (itemId, idx) => {\n      const currPrefix = colPrefixs[idx]\n      const count = await this.getPrefixCount(currPrefix, prefixMap)\n      query = ` mutation {\n            change_simple_column_value (board_id: ${boardId}, item_id: ${itemId}, column_id: \"${colId}\", value: ${currPrefix+count}) {\n              id\n            }\n          }`\n      await monday.api(query)\n    });\n\n    await this.savePrefixMap(prefixMap, colId)\n    // window.parent.location.reload();\n\n    // this.loadBoardNum(nextNum)\n\n  }\n\n\n  getColPrefixs = async (srcColId, boardId) => {\n    const query = `query\n                     {  boards (ids:${boardId}) \n                         { items {\n                           column_values {\n                             id\n                             text\n                            }\n                         }\n                       }\n                     }`\n\n    let res = await monday.api(query)\n    const { data: { boards } } = res\n    const { items } = boards[0]\n    return items.map(itemColVals => {\n      const { column_values: colVals } = itemColVals\n      const srcColVal = colVals.find(col => col.id === srcColId)\n      return srcColVal.text\n    })\n\n\n  }\n\n  getPrefixCount = async (prefix, prefixMap) => {\n    prefixMap.map[prefix] = (prefixMap.map[prefix]) ? prefixMap.map[prefix] + 1 : 1\n    return prefixMap.map[prefix]\n  }\n\n  savePrefixMap = async (prefixMap, targetColId) => {\n    // const {prefixMap} = this.state\n    // console.log('prefixMap', prefixMap)\n    if (!prefixMap?.targetColId) {\n      prefixMap.targetColId = targetColId\n    }\n    console.log('savePrefixMap= -> prefixMap', prefixMap)\n    const newPrefixMap = await mondayService.updatePrefixMap(prefixMap)\n\n\n  }\n\n  testCall = async (ev, prefix, targetCol) => {\n    ev.preventDefault()\n\n    // const prefixMap = await mondayService.updatePrefixMap()\n    const prefixMap = await mondayService.updatePrefixMap()\n    console.log('prefixMap', prefixMap)\n  }\n\n\n\n  // apiCallTest = () => {\n  //   const query = ``\n  // }\n\n  setSelectedColumn = (selectedColumn) => {\n    this.setState({ selectedColumn })\n  }\n\n\n  \n\n\n  render() {\n    const { columns } = this.state\n    if (!columns) return <div>Loading..</div>\n    return (\n      <div className=\"container\">\n        <AddColumn setSelectedColumn={this.setSelectedColumn} columns={columns} testCall={this.testCall} createColumn={this.createColumn} />\n\n\n      </div>\n    )\n  }\n}\nconst style = {\n  backgroundColor: \"\"\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"../App.css\";\nimport \"monday-ui-react-core/dist/main.css\"\nimport Home from \"./Home\";\n//Explore more Monday React Components here: https://style.monday.com/\n\nclass App extends React.Component {\n\n  // Default state\n  state = {\n\n  };\n\n\n  async componentDidMount() {\n\n  }\n\n\n\n  render() {\n    return (\n\n        <div className=\"main-container\">\n          <header className=\"main-header\">Hello!</header>\n          <Home/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}